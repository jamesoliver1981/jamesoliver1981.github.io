c+mean=(x)
c+mean(x)
mean(x)
averagex<- sumcoef[2,1]*mean(x)+sumcoef[1,1]
averagex
sumcoef
sumcoef<- summary(fit)$coefficients
sumcoef
averagex<- sumcoef[2,1]*mean(x)+sumcoef[1,1]
sumcoef<- summary(fit)$coefficients
averagex
c+averagex
fit<- lm(y~I(x*2))
sumcoef<-summary(fit)$coefficients
sumcoef[2,1] + c(-1, 1) * qt(.95, df = fit$df) * sumcoef[2, 2] ->c
c
sumcoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumcoef[2, 2]
fit$df
data("mtcars")
head(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
fit<- lm(y~x)
summary(fit)
?predict
?newdata
??newdata
?predict
class(x)
nd<-data.frame(x=seq(3,8,length=40))
head(nd)
class(nd)
predict(fit,interval = "prediction",newdata = nd)
plot(fit)
predict(fit,interval = "prediction",newdata = nd) -> conf
plot(conf)
average(x)
mean(x)
nd<-data.frame(x=seq(3.21725,8,length=40))
head(nd)
head(predict(fit,interval = "prediction",newdata = nd))
x <- mtcars$wt*2
head(mtcars$wt)
head(x)
head(predict(fit,interval = "interval",newdata = nd))
head(predict(fit,interval = "confidence",newdata = nd))
?mtcars
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
hist(training$Superplasticizer)
log(0)
training$log<-log(training$Superplasticizer+1)
hist(training$log)
hist(training$Superplasticizer)
hist(training$log)
log(1)
log(2)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
dim(training)
?grep
grep("^IL",names(training),value = TRUE)
grep("^IL",names(training),value = FALSE)
names(training)
val<- grep("^IL",names(training),value = TRUE)
val
preproc<-preProcess(val,method="pca",pcaComp = 5)
head(training[val])
preproc<-preProcess(training[val],method="pca",pcaComp = 5)
df<-training[val]
df$diagnosis<-training$diagnosis
head(df)
View(head(training))
preproc<-preProcess(df,method="pca",pcaComp = 5)
trainpc<- predict(preproc,df)
modelfit<-train(df$diagnosis~.method="glm",data=trainpc)
testdf<-testing[val]
testdf$diagnosis<-testing$diagnosis
testpc<-predict(preproc,testdf)
confusionMatrix(testdf$diagnosis,predict(modelfit,testpc))
modelfit<-train(df$diagnosis~.,method="glm",data=trainpc)
install.packages("e1071")
modelfit<-train(df$diagnosis~.,method="glm",data=trainpc)
testdf<-testing[val]
testdf$diagnosis<-testing$diagnosis
testpc<-predict(preproc,testdf)
confusionMatrix(testdf$diagnosis,predict(modelfit,testpc))
stillfunc<- function(input){
val<- grep("^IL",names(training),value = TRUE)
#value to change is the Pca
df<-training[val]
df$diagnosis<-training$diagnosis
preproc<-preProcess(df,method="pca",pcaComp = input)
trainpc<- predict(preproc,df)
modelfit<-train(df$diagnosis~.,method="glm",data=trainpc)
testdf<-testing[val]
testdf$diagnosis<-testing$diagnosis
testpc<-predict(preproc,testdf)
confusionMatrix(testdf$diagnosis,predict(modelfit,testpc))
}
stillfunc(9)
stillfunc(10)
stillfunc(8)
preproc<-preProcess(df,method="pca",thresh = 0.9)
preproc
df<-training[val]
preproc<-preProcess(df,method="pca",thresh = 0.9)
preproc
df<-training[val]
df$diagnosis<-training$diagnosis
preproc<-preProcess(df,method="pca",thresh = 0.8)
trainpc<- predict(preproc,df)
modelfit<-train(df$diagnosis~.,method="glm",data=trainpc)
testdf<-testing[val]
testdf$diagnosis<-testing$diagnosis
testpc<-predict(preproc,testdf)
confusionMatrix(testdf$diagnosis,predict(modelfit,testpc))
modeltrain<- train(df$diagnosis~., method="glm",data=df)
confusionMatrix((testdf$diagnosis,predict(modeltrain,data=df)))
confusionMatrix(testdf$diagnosis,predict(modeltrain,data=df))
trainpc
head(trainpc)
confusionMatrix(testdf$diagnosis,predict(modeltrain,data=testdf))
?predict
preproc
dim(preproc)
trainpred<-predict(df,df)
modeltrain<- train(df$diagnosis~., method="glm",data=trainpred)
modeltrain<- train(df$diagnosis~., method="glm",data=df)
confusionMatrix(testdf$diagnosis,predict(modeltrain,data=testdf))
install.packages("shiny")
setwd("~/Rworkingdir/DataProducts")
getwd
getwd()
library(shiny)
?runApp
runApp(ShinyEg)
setwd("~/ShinyEg")
?setwd
runApp("~/Rworkingdir/DataProducts/ShinyEg")
runApp("ShinyEg")
runApp("ShinyEg")
runApp("ShinyEg")
runApp("ShinyEg")
runApp("ShinyEg")
runApp("~/Rworkingdir/DataProducts/ShinyEg")
runApp("~/Rworkingdir/DataProducts/ShinyEg")
runApp("ShinyEg")
runApp("ShinyEg")
runApp("ShinyEg")
runApp("ShinyEg")
?table
a<-c(10,20,30,40)
b<-c(100,120,130,140)
table<-(Weight=a,Height=b)
table(a)
table(a,b)
tab<-table(a,b)
?match
?index
match(125 %in% b)
match(125,b)
match(120,b)
which(min(abs(b,125)))
which(min(abs(b-125)))
which.min(b-125)
which.min(abs(b-125))
which.min(abs(b-123))
which.min(abs(b-127))
which.max(abs(b-127))
which.min(abs(b-130))
which.min(abs(b-135))
which.min(abs(b-135.1))
df<- data.frame(a = a,b=b)
df
df[2,2]
df[which.min(abs(a-17)),2]
x<-17
y<-123
df[which.min(abs(a-x)),2]
df[which.min(abs(a-x)),which.min(abs(b-y))]
x<-27
y<-134
df[which.min(abs(a-x)),which.min(abs(b-y))]
?seq
x<-c(seq(from=100, to =215, by=5))
x
y<-c(seq(from=152.4, to=193, by=2.54))
y
12*2.54*5
y<-c(seq(from=152.4, to=194, by=2.54))
y
a<-c(19,18,18,17,17,16,16,15,15,14,14,14,13,13,12,12,12)
b<-c(20,19,19,18,18,17,17,16,16,15,15,14,14,13,13,13,12)
c<-c(21,20,20,19,18,18,17,17,16,16,15,15,14,14,14,13,13)
d<-c(22,21,21,20,19,19,18,18,17,17,16,16,15,15,14,14,14)
e<-c(23,22,22,21,20,20,19,18,18,17,17,16,16,15,15,15,14)
f<-c(24,23,22,22,21,20,20,19,19,18,18,17,17,16,16,15,15)
g<-c(25,24,23,23,22,21,21,20,19,19,18,18,17,17,16,16,15)
h<-c(26,25,24,24,23,22,21,21,20,20,19,18,18,17,17,16,16)
i<-c(27,26,25,24,24,23,22,22,21,20,20,19,19,18,18,17,17)
j<-c(28,27,26,25,24,24,23,22,22,21,20,20,19,19,18,18,17)
df<-data.frame(a,b,c,d,e,f,g,h,i,j)
df
ht<-192
wt<-135
df[which.min(abs(x-wt)),which.min(abs(y-ht))]
df[2,1]
which.min(abs(x-wt))
which.min(abs(y-ht))
df[8,17]
dim(df)
df
dim(df)
y<-c(seq(from=100, to =215, by=5))
x<-c(seq(from=152.4, to=194, by=2.54))
df[which.min(abs(x-ht)),which.min(abs(y-wt))]
ht<-153
df[which.min(abs(x-ht)),which.min(abs(y-wt))]
k<-c(29,28,27,26,25,25,24,23,22,22,21,21,20,19,19,18,18)
l<-c(30,29,28,27,26,25,25,24,23,22,22,21,21,20,19,19,18)
m<-c(31,30,29,28,27,26,25,25,24,23,23,22,21,21,20,20,19)
n<-c(32,31,30,29,28,27,26,25,25,24,23,23,22,21,21,20,20)
o<-c(33,32,31,30,29,28,27,26,25,25,24,23,23,22,21,21,20)
p<-c(34,3,32,31,30,29,28,27,26,25,25,24,23,23,22,21,21)
q<-c(35,34,33,32,31,30,29,28,27,26,25,5,24,23,23,22,22)
r<-c(36,35,33,32,31,30,29,29,28,27,26,25,25,24,23,23,22)
s<-c(37,36,34,33,32,31,30,29,28,28,27,26,25,25,24,23,23)
t<-c(38,36,35,34,33,32,31,30,29,28,28,27,26,25,25,24,23)
u<-c(39,37,36,35,34,33,32,31,30,29,28,28,27,26,25,25,24)
v<-c(40,38,37,36,35,34,33,32,31,30,29,28,27,27,26,25,25)
w<-c(41,39,38,37,36,35,34,33,32,31,30,29,28,27,27,26,25)
z<-c(42,40,39,38,37,35,34,33,32,31,30,30,29,28,27,26,26)
df<-data.frame(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,z)
df
final<- data.frame(score=c(15,21.5,27.5,35,45),category=c("Underweight",
final<- data.frame(score=c(15,21.5,27.5,35,45),category=c("Underweight",
"Healthy",
"Overweight",
"Obese",
"Extremely Obese"))
final
which.min(abs(final-25))
which.min(abs(final$score-25))
which.min(abs(final$score-24))
final[which.min(abs(final$score-24)),2]
final[which.min(abs(final$score-30)),2]
final[which.min(abs(final$score-331)),2]
final[which.min(abs(final$score-31)),2]
final[which.min(abs(final$score-32)),2]
bmi<-df[which.min(abs(x-ht)),which.min(abs(y-wt))]
?which.min
which.max(final>=29)
which.max(final$score>=29)
final<- data.frame(score=c(0,18,25,30,40),category=c("Underweight",
"Healthy",
"Overweight",
"Obese",
"Extremely Obese"))
which.max(final$score>=29)
which.max(final$score<=29)
which.max(final$score>=25)
which.max(final$score<=26)
which.max(final$score>=26)
which.max(final$score>26)-1
which.max(final$score>29)-1
which.max(final$score>30)-1
which.max(final$score>440)-1
which.max(final$score>45)-1
which.max(final$score>40)-1
which.max(final$score>39)-1
final<- data.frame(score=c(18,25,30,40,50),category=c("Underweight",
"Healthy",
"Overweight",
"Obese",
"Extremely Obese"))
which.max(final$score>39)
which.max(final$score>40)
which.max(final$score>15)
which.max(final$score>18)
which.max(final$score>23)
which.max(final$score>25)
bmi<-df[which.min(abs(x-ht)),which.min(abs(y-wt))]
bmi
final[which.max((final$score>bmi)),2]
ht<-170
wt<-150
bmi<-df[which.min(abs(x-ht)),which.min(abs(y-wt))]
final[which.max((final$score>bmi)),2]
ht<-172
wt<-150
bmi<-df[which.min(abs(x-ht)),which.min(abs(y-wt))]
final[which.max((final$score>bmi)),2]
ht<-169
bmi<-df[which.min(abs(x-ht)),which.min(abs(y-wt))]
final[which.max((final$score>bmi)),2]
ht<-168
wt<-150
bmi<-df[which.min(abs(x-ht)),which.min(abs(y-wt))]
final[which.max((final$score>bmi)),2]
ht<-166
wt<-150
bmi<-df[which.min(abs(x-ht)),which.min(abs(y-wt))]
final[which.max((final$score>bmi)),2]
final[which.max((final$score>18)),2]
runApp("ShinyEg")
runApp("ShinyPlot")
install.packages(UsingR)
install.packages("UsingR")
runApp("ShinyPlot")
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
runApp("ShinyPlay")
runApp("ShinyPlay")
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
df
which(df=18,arr.ind = T)
which(df==18,arr.ind = T)
x[2,1]
x
x[2]
underplot<-which(df==18,arr.ind = T)
underplot$Height<-x[underplot]
underplot
underplot<-which(df==18,arr.ind = T)
underplot<-which(df==18,arr.ind = T)
underplot$Height<-x[underplot$row]
underplot<-which(df==18,arr.ind = T)
for (i in 1:nrow(underplot)){
underplot$Height[i]<-x[underplot[i,1]]
}
x[underplot[1,1]]
x[underplot[2,1]]
underplot$row[2]
class(underplot)
underplot<-data.frame(which(df==18,arr.ind = T))
class(underplot)
underplot
for (i in 1:nrow(underplot)){
underplot$Height[i]<-x[underplot[i,1]]
}
underplot
underplot<-data.frame(which(df==18,arr.ind = T))
for (i in 1:nrow(underplot)){
underplot$Height[i]<-x[underplot[i,1]]
underplot$Weight[i]<-y[underplot[i,2]]
}
underplot
library(dplyr)
underplot<-select(underplot,-(row:col))
underplot
plot(underplot)
library(ggplot2)
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jamesoliver1981', token='0F8E766675906E1E9C433FC0E5F0F5A7', secret='PtrOBnt12I0v9Z+GCIYvOlRHgEhhKgrY474Kyr9n')
library(shinyapps)
install.packages("Rtools")
setwd("Shinyplay")
getwd()
deployApp()
?shinyUI
?pageWithSidebar
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
getwd()
deployApp()
install_github("slidify","ramnatv")
library(devtools)
install_github("slidify","ramnatv")
install_github("slidify","ramnathv")
install_github('slidify','ramnathv')
install_github('ramnathv/slidify')
install.packages("stringi")
install.packages("stringi")
install_github('ramnathv/slidify')
library(devtools)
install.packages("Rtools")
library(devtools)
install_github('ramnathv/slidify')
install_github('slidifyLibraries','ramnathv')
install_github('ramnathv/slidifyLibraries')
library(slidify)
getwd()
setwd("DataProducts")
setwd("/DataProducts")
setwd("./")
getwd()
setwd("../")
getwd()
author("first_deck")
df[5,6]
df[1,which.min(abs(y-wt))]
df[which.min(abs(x-ht)),1]
df[which.min(abs(x-ht)),15]
df[which.min(abs(x-ht)),]
df[which.min(abs(x-ht)),]==25
grep(25,df[which.min(abs(x-ht)),])
grep(24,df[which.min(abs(x-ht)),])
max(grep(24,df[which.min(abs(x-ht)),]))
y[max(grep(24,df[which.min(abs(x-ht)),]))]
ht-y[max(grep(24,df[which.min(abs(x-ht)),]))]
wt-y[max(grep(24,df[which.min(abs(x-ht)),]))]
?ifelse
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
shiny::runApp('~/RWorkingDir/DataProducts/ShinyPlay')
consquences<- function(bmi){ifelse(bmi>25,
wt-y[max(grep(24,df[which.min(abs(x-ht)),]))],
ifelse(bmi<19,wt-y[max(grep(18,df[which.min(abs(x-ht)),]))],
"You are Healthy.  You're doing great and don't need to lose weight"))}
consequences()
consquences<- function(ht,wt){
bmi<-df[which.min(abs(x-ht)),which.min(abs(y-wt))]
ifelse(bmi>25,
wt-y[max(grep(24,df[which.min(abs(x-ht)),]))],
ifelse(bmi<19,wt-y[max(grep(18,df[which.min(abs(x-ht)),]))],
"You are Healthy.  You're doing great and don't need to lose weight"))}
consequences(ht=166,wt=100)
consquences<- function(ht,wt){
bmi<-df[which.min(abs(x-ht)),which.min(abs(y-wt))]
if(bmi>25) {
wt-y[max(grep(24,df[which.min(abs(x-ht)),]))]
} else if(bmi<19){
wt-y[max(grep(18,df[which.min(abs(x-ht)),]))]
} else c("You are Healthy.  You're doing great and don't need to lose weight")
}
consequences(ht=166,wt=100)
consquences<- function(ht,wt){
bmi<-df[which.min(abs(x-ht)),which.min(abs(y-wt))]
if(bmi>25) {
val<-wt-y[max(grep(24,df[which.min(abs(x-ht)),]))]
} else if(bmi<19){
val<-wt-y[max(grep(18,df[which.min(abs(x-ht)),]))]
} else val<-c("You are Healthy.  You're doing great and don't need to lose weight")
val
}
consquences(ht=160,160)
consequences<- function(ht,wt){
bmi<-df[which.min(abs(x-ht)),which.min(abs(y-wt))]
if(bmi>25) {
val<-wt-y[max(grep(24,df[which.min(abs(x-ht)),]))]
} else if(bmi<19){
val<-wt-y[max(grep(18,df[which.min(abs(x-ht)),]))]
} else val<-c("You are Healthy.  You're doing great and don't need to lose weight")
val
}
consequences(ht=166,wt=100)
consequences(ht=166,wt=150)
consequences(ht=160,wt=160)
The input will be called amount of weight you need to lose.  Negative values are therfore weight you should gain.
setwd("first_deck")
setwd("/first_deck")
setwd("~/first_deck")
setwd("~/DataProducts/ShinyEg")
getwd()
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
consequences(160,150)
browseURL("index.html")
publish("Shiny Pitch","index.html",rpubs)
publish("Shiny Pitch","index.html","rpubs")
publish(title="Shiny Pitch","index.html",host="rpubs")
publish(user=jamesoliver1981,repo="DataProducts")
publish(user=jamesoliver1981@gmail.com,repo="DataProducts")
?publish
publish_rpubs("My Shiny Presentation")
library(RCurl)
publish_rpubs("My Shiny Presentation")
publish(user="jamesoliver1981",repo="DataProducts")
publish(user="jamesoliver1981",repo="DataProducts")
publish(user=jamesoliver1981@gmail.com,repo="DataProducts")
getwd()
browseURL()
browseURL("index.html")
